service:
  name: ethvault-api

frameworkVersion: ">=1.45.1 <2.0.0"

plugins:
  - serverless-webpack

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  prefix: ${self:service}-${self:custom.stage}
  authTtl: ${opt:authTtl, "60"}
  logLevel: ${opt:logLevel, "info"}
  usersTable: ${self:custom.prefix}-users
  keysBucketName: ${self:custom.prefix}-keys-bucket
  tokenIssuer: ${opt:tokenIssuer, "https://ethvault.auth0.com/"}
  tokenAudience: ${opt:tokenAudience, "ethvault-api"}

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 128
  logRetentionInDays: 7

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.usersTable}"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: "arn:aws:s3:::${self:custom.keysBucketName}/*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        'Fn::ImportValue': 'ENSRegistrarQueueArn'

  environment:
    LOG_LEVEL: ${self:custom.logLevel}
    USERS_TABLE: ${self:custom.usersTable}
    TOKEN_ISSUER: ${self:custom.tokenIssuer}
    TOKEN_AUDIENCE: ${self:custom.tokenAudience}
    KEYS_BUCKET_NAME: ${self:custom.keysBucketName}
    ENS_REGISTRAR_QUEUE_URL:
      'Fn::ImportValue': 'ENSRegistrarQueueUrl'

functions:
  auth:
    handler: src/auth.authorize

  debug-request:
    handler: src/handlers/debug-request.handler
    events:
      - http:
          method: get
          path: debug-request
          authorizer:
            name: auth
            resultTtlInSeconds: ${self:custom.authTtl}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  list-accounts:
    handler: src/handlers/list-accounts.handler
    events:
      - http:
          method: get
          path: accounts
          request:
            parameters:
              querystrings:
                includeArchived: false
          authorizer:
            name: auth
            resultTtlInSeconds: ${self:custom.authTtl}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  create-account:
    handler: src/handlers/create-account.handler
    events:
      - http:
          method: post
          path: accounts
          authorizer:
            name: auth
            resultTtlInSeconds: ${self:custom.authTtl}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  update-account:
    handler: src/handlers/update-account.handler
    events:
      - http:
          method: put
          path: accounts/{accountId}/details
          authorizer:
            name: auth
            resultTtlInSeconds: ${self:custom.authTtl}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  get-account-encrypted-json:
    handler: src/handlers/get-account-encrypted-json.handler
    events:
      - http:
          method: get
          path: accounts/{accountId}
          request:
            parameters:
              paths:
                accountId: true
          authorizer:
            name: auth
            resultTtlInSeconds: ${self:custom.authTtl}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  delete-account:
    handler: src/handlers/delete-account.handler
    events:
      - http:
          method: delete
          path: accounts/{accountId}
          request:
            parameters:
              paths:
                accountId: true
          authorizer:
            name: auth
            resultTtlInSeconds: ${self:custom.authTtl}
            type: request
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true


resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.usersTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    KeysBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.keysBucketName}
        AccessControl: Private
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        ObjectLockEnabled: true
        ObjectLockConfiguration:
          ObjectLockEnabled: Enabled
          Rule:
            DefaultRetention:
              Days: 7
              Mode: COMPLIANCE
        LifecycleConfiguration:
          Rules:
            - NoncurrentVersionExpirationInDays: 30
              Status: Enabled
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    KeysBucketDenyUnencryptedObjectsPolicy:
      Type: AWS::S3::BucketPolicy
      DeletionPolicy: Retain
      Properties:
        Bucket: ${self:custom.keysBucketName}
        PolicyDocument:
          Version: '2012-10-17'
          Id: LimitIncorrectAccess
          Statement:
            - Sid: DenyAccessOutsideLambda
              Effect: Deny
              Principal: "*"
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: "arn:aws:s3:::${self:custom.keysBucketName}/*"
              Condition:
                StringNotLike:
                  aws:userid:
                    - Fn::Join:
                        - ":"
                        - - !GetAtt IamRoleLambdaExecution.RoleId
                          - "*"
            - Sid: DenyIncorrectEncryptionHeader
              Effect: Deny
              Principal: "*"
              Action: s3:PutObject
              Resource: "arn:aws:s3:::${self:custom.keysBucketName}/*"
              Condition:
                StringNotEquals:
                  s3:x-amz-server-side-encryption: AES256
            - Sid: DenyUnEncryptedObjectUploads
              Effect: Deny
              Principal: "*"
              Action: s3:PutObject
              Resource: "arn:aws:s3:::${self:custom.keysBucketName}/*"
              Condition:
                'Null':
                  s3:x-amz-server-side-encryption: true
